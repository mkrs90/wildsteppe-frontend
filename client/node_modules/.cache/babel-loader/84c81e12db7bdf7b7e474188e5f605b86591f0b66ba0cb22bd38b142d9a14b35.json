{"ast":null,"code":"import { LOGIN_ENDPOINT, REFRESH_ENDPOINT, REGISTER_ENDPOINT } from './auth.constants';\nimport request from './api.request';\n// import at top - AuthService.method()\nclass AuthService {\n  constructor() {\n    this.login = this.login.bind(this);\n  }\n  // AuthService.login(uersname, password)\n  async login(email, password) {\n    try {\n      const response = await request({\n        url: LOGIN_ENDPOINT,\n        method: 'POST',\n        data: {\n          email,\n          password\n        }\n      });\n      if (response.data.access) {\n        return this.setToken(response);\n      }\n    } catch (error) {\n      return error.response;\n    }\n  }\n  //AuthService.logout()\n  logout() {\n    localStorage.removeItem('user');\n  }\n  //AuthService.register(username, email, password, firstname, lastname)\n  async register(_ref) {\n    let {\n      username,\n      email,\n      password,\n      firstName,\n      lastName\n    } = _ref;\n    try {\n      await request({\n        url: REGISTER_ENDPOINT,\n        method: 'POST',\n        data: {\n          username,\n          email,\n          password,\n          first_name: firstName,\n          last_name: lastName\n        }\n      });\n      await this.login(username, password);\n    } catch (error) {\n      return error.response;\n    }\n  }\n  setToken(response) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n    return response.data;\n  }\n  async refreshToken() {\n    try {\n      const user = JSON.parse(localStorage.getItem('user'));\n      if (user.refresh) {\n        const response = await request({\n          url: REFRESH_ENDPOINT,\n          method: 'POST',\n          data: {\n            refresh: user.refresh\n          }\n        });\n        return response.data;\n      }\n    } catch (error) {\n      return error.response;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["LOGIN_ENDPOINT","REFRESH_ENDPOINT","REGISTER_ENDPOINT","request","AuthService","constructor","login","bind","email","password","response","url","method","data","access","setToken","error","logout","localStorage","removeItem","register","_ref","username","firstName","lastName","first_name","last_name","setItem","JSON","stringify","refreshToken","user","parse","getItem","refresh"],"sources":["/workspace/wildsteppe-frontend/client/src/services/auth.service.js"],"sourcesContent":["import {\n    LOGIN_ENDPOINT,\n    REFRESH_ENDPOINT,\n    REGISTER_ENDPOINT,\n  } from './auth.constants';\n  \n  import request from './api.request';\n  // import at top - AuthService.method()\n  class AuthService {\n    constructor() {\n      this.login = this.login.bind(this);\n    }\n  // AuthService.login(uersname, password)\n    async login(email, password) {\n      try {\n        const response = await request({\n          url: LOGIN_ENDPOINT,\n          method: 'POST',\n          data: {\n            email,\n            password,\n          },\n        });\n  \n        if (response.data.access) {\n          return this.setToken(response);\n        }\n      } catch (error) {\n        return error.response;\n      }\n    }\n  //AuthService.logout()\n    logout() {\n      localStorage.removeItem('user');\n    }\n  //AuthService.register(username, email, password, firstname, lastname)\n    async register({\n      username,\n      email,\n      password,\n      firstName,\n      lastName,\n    }) {\n      try {\n        await request({\n          url: REGISTER_ENDPOINT,\n          method: 'POST',\n          data: {\n            username,\n            email,\n            password,\n            first_name: firstName,\n            last_name: lastName,\n          },\n        });\n  \n        await this.login(username, password);\n      } catch (error) {\n        return error.response;\n      }\n    }\n  \n    setToken(response) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n      return response.data;\n    }\n  \n    async refreshToken() {\n      try {\n        const user = JSON.parse(localStorage.getItem('user'));\n  \n        if (user.refresh) {\n          const response = await request({\n            url: REFRESH_ENDPOINT,\n            method: 'POST',\n            data: {\n              refresh: user.refresh,\n            },\n          });\n  \n          return response.data;\n        }\n      } catch (error) {\n        return error.response;\n      }\n    }\n  }\n  \n  export default new AuthService();"],"mappings":"AAAA,SACIA,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,QACZ,kBAAkB;AAEzB,OAAOC,OAAO,MAAM,eAAe;AACnC;AACA,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;EACpC;EACF;EACE,MAAMD,KAAKA,CAACE,KAAK,EAAEC,QAAQ,EAAE;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,OAAO,CAAC;QAC7BQ,GAAG,EAAEX,cAAc;QACnBY,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UACJL,KAAK;UACLC;QACF;MACF,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACG,IAAI,CAACC,MAAM,EAAE;QACxB,OAAO,IAAI,CAACC,QAAQ,CAACL,QAAQ,CAAC;MAChC;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,OAAOA,KAAK,CAACN,QAAQ;IACvB;EACF;EACF;EACEO,MAAMA,CAAA,EAAG;IACPC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;EACjC;EACF;EACE,MAAMC,QAAQA,CAAAC,IAAA,EAMX;IAAA,IANY;MACbC,QAAQ;MACRd,KAAK;MACLC,QAAQ;MACRc,SAAS;MACTC;IACF,CAAC,GAAAH,IAAA;IACC,IAAI;MACF,MAAMlB,OAAO,CAAC;QACZQ,GAAG,EAAET,iBAAiB;QACtBU,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UACJS,QAAQ;UACRd,KAAK;UACLC,QAAQ;UACRgB,UAAU,EAAEF,SAAS;UACrBG,SAAS,EAAEF;QACb;MACF,CAAC,CAAC;MAEF,MAAM,IAAI,CAAClB,KAAK,CAACgB,QAAQ,EAAEb,QAAQ,CAAC;IACtC,CAAC,CAAC,OAAOO,KAAK,EAAE;MACd,OAAOA,KAAK,CAACN,QAAQ;IACvB;EACF;EAEAK,QAAQA,CAACL,QAAQ,EAAE;IACjBQ,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACnB,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC3D,OAAOH,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMiB,YAAYA,CAAA,EAAG;IACnB,IAAI;MACF,MAAMC,IAAI,GAAGH,IAAI,CAACI,KAAK,CAACd,YAAY,CAACe,OAAO,CAAC,MAAM,CAAC,CAAC;MAErD,IAAIF,IAAI,CAACG,OAAO,EAAE;QAChB,MAAMxB,QAAQ,GAAG,MAAMP,OAAO,CAAC;UAC7BQ,GAAG,EAAEV,gBAAgB;UACrBW,MAAM,EAAE,MAAM;UACdC,IAAI,EAAE;YACJqB,OAAO,EAAEH,IAAI,CAACG;UAChB;QACF,CAAC,CAAC;QAEF,OAAOxB,QAAQ,CAACG,IAAI;MACtB;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,OAAOA,KAAK,CAACN,QAAQ;IACvB;EACF;AACF;AAEA,eAAe,IAAIN,WAAW,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}